#!/bin/bash

repository=http://repo.maven.apache.org/maven2/

usage () {
echo -e "\e[31m
 usage:
   ${0##*/} get -r:$repository -m:groupId:artifactId:packaging:version [-t:targetDir]
   ${0##*/} download -r:$repository -m:groupId:artifactId:packaging:version [-t:targetDir]
   ${0##*/} install -m:groupId:artifactId:version:packaging -f:/path/to/file.ext
   ${0##*/} deploy -r:$repository -m:groupId:artifactId:version:packaging -f:/path/to/file.ext -i:repositoryId
   ${0##*/} maven list -r:$repository -m:groupId:artifactId
\e[0m"
}

info() {
    echo -e "\e[32m$*\e[0m"
}

warn() {
    echo -e "\e[31m$*\e[0m"
}

if [ $# -lt 1 ] ;then
    usage
    exit 0
fi

redirect=true
opts=
groupId=
artifactId=
version=
src=
cmd=
for o in $*
do
    case $o in
        list|wget|get|install|deploy|download)
            cmd=$o
            ;;
        -f:*)
            src=${o#-f:}
            ;;
        -i:*)
            repositoryId=${o#-i:}
            ;;
        -r:*)
            repository=${o#-r:}
            ;;
        -t:*)
            targetDir=${o#-t:}
            ;;
        -m:*)
            if [ "${o//\//.}" != "$o" ] ;then
                coo=${o#*:}
                coo=${coo#/}
                coo=${coo%/}
                version=${coo##*/}
                coo=${coo%/*}
                artifactId=${coo##*/}
                coo=${coo%/*}
                groupId=${coo//\//.}
                packaging=jar
            else
                coo=${o#-m:}
                groupId=
                artifactId=
                packaging=
                version=
                for e in ${coo//:/ } ;do
                    if [[ -n "$packaging" ]] ;then
                        version=$e
                        continue
                    elif [[ -n "$artifactId" ]]; then
                        packaging=$e
                        continue
                    elif [[ -n "$groupId" ]]; then
                        artifactId=$e
                        continue
                    else
                        groupId=$e
                        continue
                    fi
                done
            fi
            ;;
        -h|-help|--help)
            usage
            exit 0
            ;;
        *)
            opts+="$o "
            ;;
    esac
done

if [ "$cmd" == "list" -o "$cmd" == "download" ] ;then
    for ((i = 0; 1 ; i ++)) ;do
        active=$(mvn help:evaluate -Dexpression=settings.profiles[$i].activation.activeByDefault 2>/dev/null|grep -E "true|false")
        if [ $? -ne 0 ] ;then
            break
        fi
        if [ "$active" == "true" ] ;then
            for ((j = 0; 1 ; j++)) ;do
                rep=$(mvn help:evaluate -Dexpression=settings.profiles[$i].repositories[$j].url 2>/dev/null|grep "^https\?://.*$")
                if [ $? -eq 0 ] ;then
                    info "Found optional repository: $rep"
                    repository+=" $rep"
                else
                    break
                fi
            done
        fi
    done
fi

echo -e "\e[31mTrying to work($cmd) with : $repository ... \e[0m"

case $cmd in
    install)
        mvn install:install-file -DgroupId=$groupId -DartifactId=$artifactId -Dversion=$version -Dpackaging=$packaging -Dfile=$src $opts
        ;;
    deploy)
        mvn deploy:deploy-file -DgroupId=$groupId -DartifactId=$artifactId -Dversion=$version -Dpackaging=$packaging -Dfile=$src -Durl=$repository -DrepositoryId=$repositoryId $opts
        ;;
    get)
        mvn dependency:get -DrepoUrl=$repository -Dartifact=$groupId:$artifactId:$version:$packaging $opts
        if [ -e "$targetDir" ] ;then
            localRepository=$(mvn help:evaluate -Dexpression=settings.localRepository 2>/dev/null|grep "^/")
            cp -vf $localRepository/${groupId//./\/}/$artifactId/$version/$artifactId-$version.$packaging $targetDir
        fi
        ;;
    list)
        isfound=
        for rep in $repository ;do
            releases=$(curl -qs "${rep%/}/${groupId//./\/}/${artifactId}/"|sed '/\/<\/a><\/td>/{ N;s/^\s\+<td><a[^<>]\+>\([^<>\/]\+\)\/<\/a><\/td>\n\s\+<td>\([^<>]\+\)<\/td>/#MATCH;\1;\2/g;}'|sed 's/^<a[^<>]\+>\([^<>\/]\+\)\/<\/a>\s\+\([^\s]\{11\} [^\s]\{5\}\)\s\+.*$/#MATCH;\1;\2/g'|grep "^#MATCH"|awk -F\; '{print $3","$2}'|while read ln ;do
                updated=${ln%%,*}
                echo "[$(date -d "$updated" "+%Y/%m/%d %R")] ${ln##*,}"
            done)
            [ -n "$releases" ] && echo "$releases"|sort && break
        done
        ;;
    download)
        targetDir=${targetDir:-.}
        for rep in $repository ;do
            targetUrl=${repository%/}/${groupId//./\/}/${artifactId}/${version}/${artifactId}-${version}
            case $packaging in
                jar|pom)
                    targetUrl+=".${packaging}"
                    ;;
                sources)
                    targetUrl+="${packaging}.jar"
                    ;;
                *)
                    warn "invalid packaging : $packaging"
                    exit 1
                    ;;
            esac
            cmdline=
            axel --version>/dev/null 2>&1
            if [ $? -eq 0 ] ;then
                cmdline+="axel -n 4 -o $targetDir/${targetUrl##*/} $targetUrl"
            else
                cmdline+="wget -O $targetDir/${targetUrl##*/} $targetUrl"
            fi
            $cmdline
            [ $? -eq 0 ] && break
        done
        ;;
    *)
        ;;
esac
