#!/usr/bin/env bash

const_m=${BASH_SOURCE}

if [ "${const_m:0:8}" == "/dev/fd/" ] ;then
    # from pipe
    const_m=
fi

const_source_dir=${const_m%/*}
const_command=${const_m##*/}

const_url_m="https://git.oschina.net/soiff/scripts/raw/master/bash/m"
const_version="1.0.6"

opt_goals=
opt_options="-Dmaven.test.skip -Dmaven.javadoc.skip"

function red() {
    echo -e "\033[31m$*\033[0m"
}

function green() {
    echo -e "\033[32m$*\033[0m"
}

function usage() {
      red "Usage: ${const_command} {cvacotpvisd|help|upgrade|<options>}"
      red "Options can be linked to one word:"
    green "  c            : clean"
    green "  va           : validate"
    green "  co           : compile"
    green "  t            : test"
    green "  p            : package"
    green "  v            : verify"
    green "  i            : install"
    green "  s            : site"
    green "  d            : deploy"
      red "Options should be specified independently:"
    green "  help         : same as --help"
    green "  upgrade      : upgrade to latest release"
      red "Supported options:"
    green "  --help       : show help"
    green "  -v|--version : show version information"
    green "  -*           : additional options"
    green "  *            : additional goals"
}

function release() {
      red "v${const_version}"
    green "  1. Support -rf|--resume-from|-P|--active-profiles options;"
      red "v1.0.6"
    green "  1. Support -pl|--projects options;"
      red "v1.0.5"
    green "  1. Support aggregation for goals;"
}

function upgrade() {
    if [ -n "${const_m}" -a -e "${const_m}" ] ;then
        curl -skSL "${const_url_m}" -o "${const_m}"
        if [ $? -eq 0 ] ;then
            chmod +x "${const_m}"
        fi
        green "Congratulations, 'm' has been upgraded to latest version ${const_version}!"
        ${const_m} release
        return $?
    fi
    red "'m' has not been installed, please install it by \`bash <(curl -skSL ${const_url_m})\`!"
    return 0
}

function trim() {
    echo $*
}

function parsing() {
    case $1 in
        va*)
            opt_goals+=" validate"
            parsing "${1#va}"
            ;;
        v*)
            opt_goals+=" verify"
            parsing "${1#v}"
            ;;
        co*)
            opt_goals+=" compile"
            parsing "${1#co}"
            ;;
        c*)
            opt_goals+=" clean"
            parsing "${1#c}"
            ;;
        t*)
            opt_goals+=" test"
            parsing "${1#t}"
            ;;
        p*)
            opt_goals+=" package"
            parsing "${1#p}"
            ;;
        i*)
            opt_goals+=" install"
            parsing "${1#i}"
            ;;
        s*)
            opt_goals+=" site"
            parsing "${1#s}"
            ;;
        d*)
            opt_goals+=" deploy"
            parsing "${1#d}"
            ;;
        *)
            # treat as additional goals
            opt_goals+=" ${1}"
            ;;
    esac
}

const_args=($*)
const_args_count=${#const_args[@]}
for ((i = 0; i < $const_args_count; ++i)) ;do
    c=${const_args[i]}
    case ${c} in
        upgrade)
            upgrade
            exit $?
            ;;
        release)
            release
            exit 0
            ;;
        -pl|--projects|-rf|--resume-from|-P|--active-profiles)
            let i+=1
            if [ ${i} -lt ${const_args_count} ] ;then
                opt_options+=" ${c} ${const_args[${i}]}"
            fi
            ;;
        c*|v*|t*|p*|i*|s*|d*)
            parsing "${c}"
            ;;
        help)
            usage
            exit 0
            ;;
        -h|--help)
            opt_options="${c}"
            break
            ;;
        -v|--version)
            red "${const_version}"
            exit 0
            ;;
        -*)
            opt_options+=" ${c}"
            ;;
        *)
            # treat as additional goals
            opt_goals+=" ${c}"
            ;;
    esac
done

if [ $# -eq 0 ] ;then
    if [ -z "${const_m}" -o ! -e "${const_m}" ] ;then
        for d in ${PATH//:/ } ;do
            v_dir="$d"
            v_m="${v_dir}/m"
            if [ -e ${v_dir} ] ;then
                if [ ! -e ${v_m} ] ;then
                    curl -skSL "${const_url_m}" -o "${v_m}">/dev/null 2>&1
                    if [ $? -ne 0 ] ;then
                        continue
                    fi
                    chmod +x ${v_m}>/dev/null 2>&1
                    if [ $? -ne 0 ] ;then
                        continue
                    fi
                    green "Congratulations, 'm' has been installed into ${v_dir}, enjoy yourself!"
                    break
                fi
            fi
        done
    else
        usage
    fi
else
    which mvn>/dev/null 2>&1
    if [ $? -eq 0 ] ;then
        v_cmd="mvn $(trim ${opt_goals}) $(trim ${opt_options})"
        green "${v_cmd}"
        ${v_cmd}
    else
        red "'mvn' has not been found in PATH, please make sure maven has been installed already."
    fi
fi
